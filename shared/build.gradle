apply plugin: 'com.android.library'
apply plugin: 'kotlin-multiplatform'
apply plugin: 'kotlin-kapt'
apply plugin: 'realm-android'

android {
    compileSdkVersion 29

    defaultConfig {
        minSdkVersion 21
        targetSdkVersion 29
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {}
    }
    sourceSets {
        main.java.srcDirs += 'src/commonMain/kotlin'
        main.java.srcDirs += 'src/androidMain/kotlin'
    }
    compileOptions {
        targetCompatibility = '1.8'
    }
}

kotlin {
    targets {
        final def iOSTarget = System.getenv('SDK_NAME')?.startsWith("iphoneos")    \
                                 ? presets.iosArm64 : presets.iosX64

        fromPreset(iOSTarget, 'ios') {
            binaries {
                framework('shared')
            }
        }

        android()
    }

    sourceSets {
        commonMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib-common'

            compileOnly 'javax.annotation:javax.annotation-api:1.3.2'
        }

        commonMain.kotlin.srcDirs += 'src/commonMain/kotlin'

        androidMain.dependencies {
            api 'org.jetbrains.kotlin:kotlin-stdlib'

            //RxJava
            implementation 'io.reactivex.rxjava2:rxandroid:2.1.1'
            implementation 'io.reactivex.rxjava2:rxjava:2.2.8'
            implementation 'io.reactivex.rxjava2:rxkotlin:2.3.0'

            //Push Notifications
            api 'androidx.core:core-ktx:1.0.2'
        }

        androidMain.kotlin.srcDirs += 'src/androidMain/kotlin'

        iosMain.dependencies {
        }

        iosMain.kotlin.srcDirs += 'src/iosMain/kotlin'
    }
}

dependencies {
    kapt 'io.realm:realm-annotations-processor:5.14.0'

    implementation 'com.squareup.retrofit2:converter-gson:2.5.0'
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}

task packForXCode(type: Sync) {
    final File frameworkDir = new File(buildDir, "xcode-frameworks")
    final String mode = project.findProperty("XCODE_CONFIGURATION")?.toUpperCase() ?: 'DEBUG'
    final def framework = kotlin.targets.ios.binaries.getFramework("shared", mode)

    inputs.property "mode", mode
    dependsOn framework.linkTask

    from { framework.outputFile.parentFile }
    into frameworkDir

    doLast {
        new File(frameworkDir, 'gradlew').with {
            text = "#!/bin/bash\nexport 'JAVA_HOME=${System.getProperty("java.home")}'\ncd '${rootProject.rootDir}'\n./gradlew \$@\n"
            setExecutable(true)
        }
    }
}
tasks.build.dependsOn packForXCode

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}